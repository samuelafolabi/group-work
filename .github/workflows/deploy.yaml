name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  terraform:
    name: Setup and Apply Terraform
    runs-on: ubuntu-latest
    steps:

      - name: Checkout Code
        uses: actions/checkout@v4

      - name: List Directory Contents
        run: ls -la infra/

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Terraform Init
        working-directory: infra/
        run: terraform init

      - name: Terraform Plan
        working-directory: infra/
        run: terraform plan -out=tfplan   
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: Terraform Apply
        working-directory: infra/
        run: terraform apply -auto-approve tfplan
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: terraform
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: true

      - name: Build and Push Docker Image to Amazon ECR
        id: build-docker-image
        env:
          ECR_REGISTRY: ${{ steps.ecr-login.outputs.registry }}
          IMAGE_TAG: latest
          REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
        run: |
          docker build -t $ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG
          echo "IMAGE_URI=${{ env.ECR_REGISTRY }}/${{ env.REPOSITORY }}:${{ env.IMAGE_TAG }}" >> $GITHUB_ENV

      - name: Download Task Definition
        run: |
          aws ecs describe-task-definition \
          --task-definition ${{ secrets.AWS_ECS_TASK_DEFINITION_NAME }} \
          --query taskDefinition \
          --output json > taskDefinition.json

      - name: Fill in the New Image ID in the Amazon ECS Task Definition
        id: update-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: taskDefinition.json
          container-name: ${{ secrets.CONTAINER_NAME }}
          image: ${{ steps.build-docker-image.outputs.IMAGE_URI }}

      - name: Deploy Amazon ECS Task Definition
        id: deploy-ecs
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.update-task-def.outputs.task-definition }}
          service: ${{ secrets.AWS_ECS_SERVICE_NAME }}
          cluster: ${{ secrets.AWS_ECS_CLUSTER_NAME }}
          wait-for-service-stability: true











# name: CI/CD Pipeline

# on:
#   push:
#     branches:
#       - main

# jobs:
#   build-and-deploy:
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout
#         uses: actions/checkout@v4

#       - name: Configure AWS Credentials
#         uses: aws-actions/configure-aws-credentials@v4
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ${{ secrets.AWS_REGION }}

#       - name: Login to Amazon ECR
#         id: ecr-login
#         uses: aws-actions/amazon-ecr-login@v1
#         with:
#           mask-password: true

#       - name: Build and push image to Amazon ECR
#         id: build-docker-image
#         env:
#           ECR_REGISTRY: ${{ steps.ecr-login.outputs.registry }}
#           IMAGE_TAG: latest
#           REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
#         run: |
#           docker build -t $ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG .
#           docker push $ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG
#           echo "IMAGE_URI=${{ env.ECR_REGISTRY }}/${{ env.REPOSITORY }}:${{ env.IMAGE_TAG }}" >> $GITHUB_OUTPUT

#       - name: Download task definition
#         run: |
#           aws ecs describe-task-definition \
#           --task-definition ${{ secrets.AWS_ECS_TASK_DEFINITION_NAME}} \
#           --query taskDefinition \
#           --output json > taskDefinition.json

#       - name: Fill in the new image ID in the Amazon ECS task definition
#         id: update-task-def
#         uses: aws-actions/amazon-ecs-render-task-definition@v1.1.3
#         with:
#           task-definition: taskDefinition.json
#           container-name: ${{ secrets.CONTAINER_NAME }}
#           image: ${{ steps.build-docker-image.outputs.IMAGE_URI }}


#       - name: Deploy Amazon ECS task definition
#         id: deploy-ecs
#         uses: aws-actions/amazon-ecs-deploy-task-definition@v1.4.11
#         with:
#           task-definition: ${{ steps.update-task-def.outputs.task-definition }}
#           service: ${{ secrets.AWS_ECS_SERVICE_NAME }}
#           cluster: ${{ secrets.AWS_ECS_CLUSTER_NAME }}
#           wait-for-service-stability: true
